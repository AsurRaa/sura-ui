name: publish
on:
  push:
    branches:
      - master

env:
  CI: true
jobs:
  publish:
    name: Publish
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node ${{ matrix.node_version }}
        uses: actions/setup-node@v1
        with:
          node-version: 12
          registry-url: 'https://npm.pkg.github.com'
      - name: Git Identity
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/$GITHUB_REPOSITORY
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Install
        run: yarn install
      # Define ${CURRENT_VERSION}
      - name: Set Current Version
        shell: bash -ex {0}
        run: |
          CURRENT_VERSION=$(node -p 'require("./lerna.json").version')
          echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_ENV
      - name: Tag Check
        id: tag_check
        shell: bash -ex {0}
        run: |
          GET_API_URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/git/ref/tags/v${CURRENT_VERSION}"
          http_status_code=$(curl -LI $GET_API_URL -o /dev/null -w '%{http_code}\n' -s \
            -H "Authorization: token ${GITHUB_TOKEN}")
          if [ "$http_status_code" -ne "404" ] ; then
            echo "::set-output name=exists_tag::true"
          else
            echo "::set-output name=exists_tag::false"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Git Tag
        if: steps.tag_check.outputs.exists_tag == 'false'
        uses: azu/action-package-version-to-git-tag@v1
        with:
          version: ${{ env.CURRENT_VERSION }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          github_repo: ${{ github.repository }}
          git_commit_sha: ${{ github.sha }}
          git_tag_prefix: "v"
      - name: Create Release
        id: create_release
        if: steps.tag_check.outputs.exists_tag == 'false' && github.event.pull_request.merged == true
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.CURRENT_VERSION }}
          # Copy Pull Request's tile and body to Release Note
          release_name: ${{ github.event.pull_request.title }}
          body: |
            ${{ github.event.pull_request.body }}
          draft: false
          prerelease: false
      - name: Publish
        if: steps.tag_check.outputs.exists_tag == 'false'
        run: |
          yarn lerna publish from-package --yes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# Method 2

# name: CD

# on:
#   push:
#     branches:
#       - master

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: checkout
#         uses: actions/checkout@v1

#       - name: Configure CI Git User
#         run: |
#           git config --global user.name '@bennypowers'
#           git config --global user.email 'bennypowers@users.noreply.github.com'
#           git remote set-url origin https://$GITHUB_ACTOR:$GITHUB_PAT@github.com/asurraa/sura-ui
#         env:
#           GITHUB_PAT: ${{ secrets.GITHUB_PAT }}

#       - name: Checkout and pull branch
#         run: git checkout "${GITHUB_REF:11}" && git pull

#       - name: Install Packages
#         run: yarn install

#       - name: Authenticate with Registry
#         run: |
#           yarn logout
#           echo "@apollo-elements:registry=http://registry.npmjs.org/" > .npmrc
#           echo "registry=http://registry.npmjs.org/" >> .npmrc
#           echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> .npmrc
#           npm whoami
#         env:
#           NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

#       - name: Publish package
#         run: npm whoami && git stash && yarn lerna publish from-package --yes --exact --no-git-tag-version --no-push --yes --npm-tag=latest
#         env:
#           GH_TOKEN: ${{ secrets.GITHUB_PAT }}
#           GITHUB_TOKEN: ${{ secrets.GITHUB_PAT }}
#           NPM_TOKEN: ${{ secrets.NPM_TOKEN }}


# Method 1
# name: Publish with Lerna

# on:
#   push:
#     branches:
#       - master
# jobs:
#   Publish_Workflow:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout repo
#         uses: actions/checkout@v2
#         with:
#           fetch-depth: "0"
#       - name: Git Identity
#         run: |
#           git config --global user.name '@lyhourchhen'
#           git config --global user.email 'ukamilove66@gmail.com'
#           git remote set-url origin https://$GITHUB_ACTOR:$GITHUB_TOKEN@github.com/$GITHUB_REPOSITORY
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       - name: Prepare repository
#         run: git checkout "${GITHUB_REF:11}"
#       - name: Fetch
#         run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
#       - name: Pulling
#         run: git pull
#       - name: Install dependencies
#         run: yarn install --pure-lockfile
#       - name: Authenticate with Registry
#         run: |
#           yarn logout
#           echo "@asurraa:registry=http://registry.npmjs.org/" > .npmrc
#           echo "registry=http://registry.npmjs.org/" >> .npmrc
#           echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> .npmrc
#           npm whoami
#         env:
#           NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
#       - name: Add Token to to .npmrc
#         run:  echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
#       - name: Publish with Lerna
#         run: npm whoami && git stash && npx lerna publish from-package --exact --no-git-tag-version --no-push --yes --npm-tag=latest --force-publish=*
#         env:
#           NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
#           GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
